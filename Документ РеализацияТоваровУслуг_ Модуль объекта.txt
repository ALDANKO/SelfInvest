Перем мВалютаРегламентированногоУчета Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мЕстьКолонкаСерии Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;

Перем мУдалятьДвижения;

Перем мМинимальныеЦены Экспорт;

Перем мСписокФильтров Экспорт;

Перем мУчетнаяПолитика;

Перем мРассчитыватьАвтоматическиеСкидки;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента(СуммыВРублях = Ложь)
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
    |	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Отпустил,
	|	Получил,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ДолжностьПредставителяОрганизации КАК ДолжностьПредставителяОрганизации,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента,
	|   ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ОтпускПроизвел,
	|	АдресДоставки,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
        
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаЦены,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|   2,
	|   РеализацияТоваровУслуг.НомерСтроки,
	|	Выразить(РеализацияТоваровУслуг.Содержание КАК Строка(100)),
	|	Выразить(РеализацияТоваровУслуг.Содержание КАК Строка(100)),
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	NULL,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	NULL,
	|	NULL,
	|	NULL
	|	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, НомерСтрокиТЧ
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НомерСтроки						КАК НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000))  КАК Товар,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,	
	|	Цена,
	|	Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку нкладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	СписокДополнительныхПараметров = СписокДополнительныхПараметров + "АдресДоставки,";
	
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = ЗапросТовары.Итог("Скидка") + ЗапросТовары.Итог("АвтоматическаяСкидка") <> 0;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Если Товары.Итог("КоличествоМест") > 0 Тогда
		ОбластьШапки  = ОбластьШапки  + "Мест";
		ОбластьСтроки = ОбластьСтроки + "Мест";
	Конецесли;
	
	Если ЕстьСкидки Тогда
		ОбластьШапки  = ОбластьШапки  + "Скидка";
		ОбластьСтроки = ОбластьСтроки + "Скидка";
	КонецЕсли; 
	
	// Вывести табличную часть (товары и услуги)
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;
	
	
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		// Скидка может быть NULL
		ПроцентСкидки = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка),0,ВыборкаСтрокТовары.Скидка) 
		              + ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.АвтоматическаяСкидка),0,ВыборкаСтрокТовары.АвтоматическаяСкидка);

		Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ПроцентСкидки);
		
		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка         = Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьИтого = "Итого";
	Если ЕстьСкидки Тогда
		ОбластьИтого  = ОбластьИтого + "Скидка";
	КонецЕсли; 
	
	// Вывести Итого
	ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 

	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		// НДС
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);

		// всего с НДС (если сумма не включает НДС)
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
	// Вывести таблицу с возвратной тарой
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Мест","");
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Мест","");
	ОбластьШапки  = СтрЗаменить(ОбластьШапки,"Скидка","")+"Тара";
	ОбластьСтроки = СтрЗаменить(ОбластьСтроки,"Скидка","")+"Тара";
	
	Если ЗапросТара.Количество() > 0 Тогда
		
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		СуммаТара    = 0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
		
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТара.Номенклатура);

			Если ВыводитьКоды Тогда
				ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТара.КодАртикул;
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьМакета);

			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		
		КонецЦикла; 
		
		// Вывести Итого
		ОбластьИтого = "ИтогоТара";
		ОбластьМакета                 = Макет.ПолучитьОбласть(ОбластьИтого);
		ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(СуммаТара);
		ТабДокумент.Вывести(ОбластьМакета);		
		
		// сделаем отступ
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 + ?(ЗапросТара.Количество() = 0, "",  НСтр("ru='; возвратная тара ';uk='; зворотна тара '",КодЯзыкаПечать) + ЗапросТара.Количество() + НСтр("ru=', на сумму ';uk=', на суму '",КодЯзыкаПечать) + ОбщегоНазначения.ФорматСумм(СуммаТара, Шапка.ВалютаДокумента)) + ".";
											 
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// Вывести подписи
	ДанныеПредставителя = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(Шапка.ДолжностьПредставителяОрганизации);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Ответственный = ДолжностьФИОПредставителя;
    ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
	

КонецФункции // ПечатьДокумента()
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг() Экспорт

	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Получил КАК ПредставительПокупателя,
	|	ПредставительОрганизации КАК ПредставительПоставщика,
	|	ДолжностьПредставителяОрганизации КАК ДолжностьПредставителяОрганизации,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Организация КАК Поставщик,
	|	Организация,
	|	Сделка,	
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ВЫРАЗИТЬ(МестоСоставленияДокумента КАК СТРОКА(1000)) КАК МестоСоставленияДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиТЧ,	
	|	Содержание КАК Номенклатура,
	|	Содержание КАК Товар,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаЦены,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ОбщегоНазначения.ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", "");
	//***
	ПредставлениеЛида="";
	ВР=ДополнительныеФункции.ВерхнийРодитель(Контрагент);
	Если ВР.Код<>"000000002" Тогда
		ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	Иначе
		Структ=ФормированиеПечатныхФорм.ФамилияИмяОтчество(Контрагент,ТекущаяДата());
		ПредставлениеЛида=Структ.Фамилия+" "+Структ.Имя+" "+Структ.Отчество;
		ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ПредставлениеЛида;
	КонецЕсли; //***
	
	//***181129
	Рисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Объект", Организация.Ссылка); 
	Запрос.Текст = "ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.ИмяФайла КАК ИмяФайла,
	|	ХранилищеДополнительнойИнформации.Объект,
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.ОписаниеФайла,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.ВидДанных
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ОписаниеФайла = ЗНАЧЕНИЕ(Перечисление.ОписаниеФайла.ПодписьПечать)
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)"; 
	
	ИзображениеПечати = Запрос.Выполнить().Выбрать(); 
	Если ИзображениеПечати.Количество()>0 тогда 
		ИзображениеПечати.Следующий(); 
		ОбластьМакета.Рисунки.ПечатьПодпись2.Картинка = ИзображениеПечати.Хранилище.Получить(); 
		ОбластьМакета.Рисунки.ПечатьПодпись2.РазмерКартинки = РазмерКартинки.АвтоРазмер; 
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);//***181129

	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='АКТ оказания услуг';uk='АКТ надання послуг'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДанныеПредставителя = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ПредставительПоставщика, Шапка.Дата);
	ДолжностьПредставителя = СокрЛП(Шапка.ДолжностьПредставителяОрганизации);
	
	ДолжностьФИОПредставителя = ?(ЗначениеЗаполнено(ДолжностьПредставителя),ДолжностьПредставителя + " ","") + 
								?(ДанныеПредставителя.Фамилия = Неопределено,"",ДанныеПредставителя.Фамилия + " ") + 
								?(ДанныеПредставителя.Имя = Неопределено,"",ДанныеПредставителя.Имя + " ") +
								?(ДанныеПредставителя.Отчество = Неопределено,"",ДанныеПредставителя.Отчество);
	
	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	//***
	Если ВР.Код<>"000000002" Тогда
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ПредставлениеЛида;
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров, КодЯзыкаПечать);
	//***
	ВР=ДополнительныеФункции.ВерхнийРодитель(Контрагент);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Если ВР.Код<>"000000002" Тогда
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;		
	ИначеЕсли ВР.Код="000000002" Тогда	//*** для Лида
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");		
		ОбластьМакета.Параметры.НазваниеПараметра="Договiр: ";
		ОбластьМакета.Параметры.ЗначениеПараметра="№ "+ДоговорКонтрагента.Номер + " вiд "+Формат(ДоговорКонтрагента.Дата,"Л=uk_UA; ДЛФ=DD");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") <> 0;

	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;

	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;

	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		
		Скидка = Ценообразование.ПолучитьСуммуСкидки(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Скидка);
		
		Если ЕстьСкидки Тогда
									
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьСтроки);
		
		Сумма    = Сумма    + СтрокаТабличнойЧасти.Сумма;
		СуммаНДС = СуммаНДС + СтрокаТабличнойЧасти.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок 	+ Скидка;
		ВсегоБезСкидок = Сумма + ВсегоСкидок;

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	Если ЕстьСкидки Тогда
		ОбластьМакета.Параметры.ВсегоБезСкидок	= ОбщегоНазначения.ФорматСумм(ВсегоБезСкидок);
		ОбластьМакета.Параметры.ВсегоСкидок		= ОбщегоНазначения.ФорматСумм(ВсегоСкидок);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Вывести(ОбластьМакета);
		
		// всего с НДС (если сумма не включает НДС)
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Сумма + СуммаНДС);
			ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;

	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	Если ЗначениеЗаполнено(Шапка.МестоСоставленияДокумента) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("МестоСоставления");
		ОбластьМакета.Параметры.МестоСоставления = СокрЛП(Шапка.МестоСоставленияДокумента);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ОбластьМакета.Параметры.ПредставительПоставщика = ДолжностьФИОПредставителя;
	

	//***
	Если ВР.Код<>"000000002" Тогда
		ОбластьМакета.Параметры.ПредставительПокупателя = Шапка.ПредставительПокупателя;
	Иначе
		ОбластьМакета.Параметры.ПредставительПокупателя = ПредставлениеЛида;
	КонецЕсли;//***
	
	Если  ТипЗнч(БанковскийСчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета")
		И ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		Банк		= БанковскийСчетОрганизации.Банк;
		МФО	 		= Банк.Код;
		НомерСчета 	= БанковскийСчетОрганизации.НомерСчета;
	Иначе
		// покажем банковские реквизиты основного счета организации
		Банк		= СведенияОПоставщике.Банк;
		МФО	 		= СведенияОПоставщике.МФО;
		НомерСчета 	= СведенияОПоставщике.НомерСчета;
	КонецЕсли;
	ОбластьМакета.Параметры.РеквизитыПоставщика = 
				  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,",,КодЯзыкаПечать)
				+ "," + Символы.ПС + НСтр("ru='Р/с ';uk='Р/р '",КодЯзыкаПечать) + НомерСчета + ", Банк " + Банк + ", МФО " + МФО + "," + Символы.ПС	
		        + ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	
	
	Рисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка); 
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Объект", Организация.Ссылка); 
	Запрос.Текст = "ВЫБРАТЬ
	|	ХранилищеДополнительнойИнформации.ИмяФайла КАК ИмяФайла,
	|	ХранилищеДополнительнойИнформации.Объект,
	|	ХранилищеДополнительнойИнформации.Хранилище,
	|	ХранилищеДополнительнойИнформации.ОписаниеФайла,
	|	ХранилищеДополнительнойИнформации.Наименование,
	|	ХранилищеДополнительнойИнформации.ВидДанных
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект
	|	И ХранилищеДополнительнойИнформации.ОписаниеФайла = ЗНАЧЕНИЕ(Перечисление.ОписаниеФайла.ПодписьПечать)
	|	И ХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительнойИнформацииОбъектов.Изображение)"; 
	
	ИзображениеПечати = Запрос.Выполнить().Выбрать(); 
	Если ИзображениеПечати.Количество()>0 тогда 
		ИзображениеПечати.Следующий(); 
		ОбластьМакета.Рисунки.ПечатьПодпись.Картинка = ИзображениеПечати.Хранилище.Получить(); 
		ОбластьМакета.Рисунки.ПечатьПодпись.РазмерКартинки = РазмерКартинки.АвтоРазмер; 
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;	
	

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПечатьДоговорООО() Экспорт 
	Попытка
		//Получаем макет из двоичных данных
		Шаблон =ПолучитьМакет("ДоговорООО");
		ИмяФайла = ПолучитьИмяВременногоФайла(".doc");
		Шаблон.Записать(ИмяФайла);
		Word = Шаблон.Получить();
		СсылкаМакет = Word.Application.Documents(1); 
		СсылкаМакет.Activate();  
		
		//включаем видимость приложения 
		СсылкаМакет.Application.Visible = Истина;  
	Исключение 
		Сообщить("Ошибка при запуске приложения "+ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция ПечатьДоговорФОП() Экспорт 
	Попытка
		//Получаем макет из двоичных данных
		Шаблон =ПолучитьМакет("ДоговорФОП");
		ИмяФайла = ПолучитьИмяВременногоФайла(".doc");
		Шаблон.Записать(ИмяФайла);
		Word = Шаблон.Получить();
		СсылкаМакет = Word.Application.Documents(1); 
		СсылкаМакет.Activate();  
		
		// в метод Bookmarks передаем название "закладки" 
		Word.Bookmarks("ФОП").Select(); 
		//устанавливаем новое значение текста 
		Word.Application.Selection.TypeText(Организация.НаименованиеПолное); 
		
		Word.Bookmarks("ФОП2").Select(); 
		Word.Application.Selection.TypeText(Организация.Наименование); 
		Word.Bookmarks("ИНН").Select(); 
		Word.Application.Selection.TypeText(Организация.ИНН); 
		Word.Bookmarks("Лицензия").Select(); 
		Word.Application.Selection.TypeText(Организация.Лицензия); 
		Word.Bookmarks("РасчСчет").Select(); 
		Word.Application.Selection.TypeText(Организация.ОсновнойБанковскийСчет.НомерСчета); 
		
		Word.Bookmarks("Банк").Select(); 
		//ПАТ КБ «Приватбанк» в м. Харків, код банку 351533
		Word.Application.Selection.TypeText(СокрЛП(Организация.ОсновнойБанковскийСчет.Банк.Наименование)+" в м. Харків, код банку "+
		СокрЛП(Организация.ОсновнойБанковскийСчет.Банк.Код)); 
		
		Word.Bookmarks("ЮрАдрес").Select(); 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (КонтактнаяИнформация.Вид = &ВидЮр ИЛИ КонтактнаяИнформация.Вид = &ВидФакт)";
		
		
		ВидЮр=Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000011");
		ВидФакт=Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000009");
		Запрос.УстановитьПараметр("ВидЮр", ВидЮр);
		Запрос.УстановитьПараметр("ВидФакт",ВидФакт);
		Запрос.УстановитьПараметр("Объект", Организация);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ЮрАдрес="";
		ФактАдрес="";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Вид=ВидЮр тогда
				ЮрАдрес=ВыборкаДетальныеЗаписи.Представление;
			ИначеЕсли 	ВыборкаДетальныеЗаписи.Вид=ВидФакт тогда
				ФактАдрес=ВыборкаДетальныеЗаписи.Представление;
			КонецЕсли;
		КонецЦикла;
		Word.Application.Selection.TypeText(ЮрАдрес); 
		Word.Bookmarks("ФактАдрес").Select(); 
		Word.Application.Selection.TypeText(ФактАдрес); 
		//включаем видимость приложения 
		СсылкаМакет.Application.Visible = Истина;  
	Исключение 
		Сообщить("Ошибка при запуске приложения "+ОписаниеОшибки());
	КонецПопытки;
КонецФункции

// Функция осуществляет запуск обработки формирующей печатную форму 1-ТН - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН()

	ОбработкаПечати = Обработки.ПечатьТТН.ПолучитьФорму("Форма");

	ОбработкаПечати.Документ       = ЭтотОбъект.Ссылка;
	ОбработкаПечати.ПунктРазгрузки = АдресДоставки;

	ОбработкаПечати.Открыть();

	Возврат Неопределено;

КонецФункции // ПечатьТТН()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьДокумента();
		
	ИначеЕсли ИмяМакета = "ДоговорООО" Тогда
		ТабДокумент = ПечатьДоговорООО();
	ИначеЕсли ИмяМакета = "ДоговорФОП" Тогда
		ТабДокумент = ПечатьДоговорФОП();
		
	ИначеЕсли ИмяМакета = "Акт" Тогда
	    ТабДокумент = ПечатьАктаОбОказанииУслуг();
	ИначеЕсли ИмяМакета = "1Т" Или ИмяМакета = "_1Т" Тогда
 	    ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "РасходСРозничныхСкладовВЦенахАТТ" Тогда
		ТабДокумент = ЗаполнениеДокументов.НапечататьПриходРасходСРозничныхСкладовВЦенахАТТ(Ссылка, мВалютаРегламентированногоУчета, Ложь);
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект));

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура;

	СтруктураМакетов.Вставить("Накладная"      , "Расходная накладная");
	
	СтруктураМакетов.Вставить("ДоговорООО"      , "Договор ООО");
	СтруктураМакетов.Вставить("ДоговорФОП"      , "Договор ФОП");
	
	СтруктураМакетов.Вставить("_1Т"            , "1-ТН (Товарно-транспортная накладная)");
	СтруктураМакетов.Вставить("Акт"            , "Акт об оказании услуг");
	СтруктураМакетов.Вставить("Бланк"          , "Бланк товарного наполнения");
	СтруктураМакетов.Вставить("СерийныеНомера" , "Список серийных номеров");

	СтруктураМакетов.Вставить("РасходСРозничныхСкладовВЦенахАТТ" , "Расход с розничных складов в ценах АТТ");

	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполнение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание,
//  ИмяТЧ             - строка, имя заполняемой табличной части, по умолчанию - "Товары",
//  МассивЗаказов     - массив, массив заказов, покоторым будем заполнять документ.
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование, ИмяТЧ = "Товары", МассивЗаказов = Неопределено) Экспорт
	
	СкладыВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	
	Если НЕ СкладыВТЧ И НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.СкладОрдер.Склад;
		Иначе			
			Склад = ДокументОснование.СкладОрдер;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДатаОстатков"     , ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	ЕстьЗаказы = МассивЗаказов <> Неопределено;
	ВедениеВзаиморасчетовПоДоговоруВЦелом = Ложь;
	Если ЕстьЗаказы Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			МассивЗаказов.Добавить(Неопределено);
			МассивЗаказов.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка());
			ВедениеВзаиморасчетовПоДоговоруВЦелом = Истина;
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;

	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Док.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	Док.СтавкаНДС,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	%СпособыСписанияОстаткаТоваров% КАК СпособыСписанияОстаткаТоваров,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Остатки.Номенклатура КАК Номенклатура,
	|		Остатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Остатки.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Остатки.Склад КАК Склад,", "") + "
	|		СУММА(Остатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ОстаткиНаСкладах.Номенклатура КАК Номенклатура,
	|			ОстаткиНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиНаСкладах.Склад КАК Склад,", "") + "
	|			ОстаткиНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			ОстаткиВРознице.Номенклатура КАК Номенклатура,
	|			ОстаткиВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ОстаткиВРознице.СерияНоменклатуры КАК СерияНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|			ОстаткиВРознице.Склад КАК Склад,", "") + "
	|			ОстаткиВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков,
	|			   Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|			   И Склад    = &Склад") + "
	|			   И Качество = &Качество
	|			) КАК ОстаткиВРознице
	|		) КАК Остатки
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|		Склад,", "") + "
	|		СерияНоменклатуры
	|	) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры"
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование 
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.СтавкаНДС,
	|	Док.ХарактеристикаНоменклатуры,
	|	// ГРУППИРОВКА_ПО_ЗАКАЗАМ
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Если ЕстьЗаказы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      ?(ВедениеВзаиморасчетовПоДоговоруВЦелом, " И (Док.Заказ В(&МассивЗаказов) ИЛИ Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ) ", " И Док.Заказ В(&МассивЗаказов) "));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "
		|	ВЫБОР	КОГДА Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ Док.Заказ = Неопределено
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИНАЧЕ Док.Заказ
		|	КОНЕЦ,");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "
		|	ВЫБОР	КОГДА Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ Док.Заказ = Неопределено
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИНАЧЕ Док.Заказ
		|	КОНЕЦ ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СпособыСписанияОстаткаТоваров%", "
		|	ВЫБОР КОГДА МАКСИМУМ(Док.Заказ) ССЫЛКА Документ.ЗаказПокупателя И МАКСИМУМ(Док.Заказ) <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.ИзРезерва)
		|			ИНАЧЕ Неопределено
		|	КОНЕЦ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%СпособыСписанияОстаткаТоваров%", "Неопределено");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;

		Если НЕ ЗначениеЗаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		СтрокаТабличнойЧасти.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;

		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = Склад;
		КонецЕсли;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.Количество = (СписКоличество * Выборка.КоэффициентЕдиницыХранения) / СтрокаТабличнойЧасти.Коэффициент;

		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если Выборка.СпособыСписанияОстаткаТоваров = Неопределено Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Выборка.СпособыСписанияОстаткаТоваров;
		КонецЕсли;
	КонецЦикла;

	// Расчет скидок
	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

//Проверяет необходимость Расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	ТипСделки = (ТипЗнч(Сделка));

	Если Не МожноРассчитыватьАвтоматическиеСкидки()
	 Или Проведен
	 Или ((ТипСделки = Тип("ДокументСсылка.ЗаказПокупателя") Или ТипСделки = Тип("ДокументСсылка.СчетНаОплатуПокупателю"))
	      И Не Сделка.Пустая()) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Процедура выполняет заполнение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание,
//  МассивЗаказов     - массив, массив заказов, покоторым будем заполнять документ.
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование, МассивЗаказов = Неопределено) Экспорт

// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	%СпособыСписанияОстаткаТоваров% КАК СпособыСписанияОстаткаТоваров,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|		// УСЛОВИЕ_СкладИзШапки
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	| УПОРЯДОЧИТЬ ПО
	|	Док.НомерСтроки
	|";
	
	ЕстьЗаказы = МассивЗаказов <> Неопределено;
	ВедениеВзаиморасчетовПоДоговоруВЦелом = Ложь;
	Если ЕстьЗаказы Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ВедениеВзаиморасчетовПоДоговоруВЦелом = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ", ?(ВедениеВзаиморасчетовПоДоговоруВЦелом, " И (Док.Заказ В(&МассивЗаказов) ИЛИ Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ) ", " И Док.Заказ В(&МассивЗаказов) "));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "
		|	ВЫБОР	КОГДА Док.Заказ ССЫЛКА Документ.ВнутреннийЗаказ ИЛИ Док.Заказ = Неопределено
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ИНАЧЕ Док.Заказ
		|	КОНЕЦ ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СпособыСписанияОстаткаТоваров%", "
		|	ВЫБОР КОГДА Док.Заказ ССЫЛКА Документ.ЗаказПокупателя И Док.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.ИзРезерва)
		|			ИНАЧЕ Неопределено
		|	КОНЕЦ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%СпособыСписанияОстаткаТоваров%", "Неопределено");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_СкладИзШапки", ?(мУказаниеСкладовВТЧ, "", "И Склад = &Склад"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);

		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();

		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;

		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен)
			или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			       СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			       КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                            ТипЦен.ЦенаВключаетНДС,
				                            УчитыватьНДС, Истина,
				                            НалоговыйУчет.ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.СпособыСписанияОстаткаТоваров = Неопределено Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
		Иначе
			СтрокаВозвратнойТары.СпособСписанияОстаткаТоваров = Выборка.СпособыСписанияОстаткаТоваров;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()
	
	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки     =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	
	Для каждого СтрокаТЧ из Товары Цикл

		Если СкладИзШапки 
		   И НЕ ЕстьКолонкаЗаказ Тогда

			СтрокаТЧ.Склад = Склад;

		ИначеЕсли ЕстьКолонкаЗаказ 
		        И НЕ СкладИзШапки 
		        И (Не ЗначениеЗаполнено(СтрокаТЧ.Склад)) Тогда

			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя))
				ИЛИ (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.СкладГруппа))
				ИЛИ ТипЗнч(СтрокаТЧ.ЗаказПокупателя.СкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда

				СтрокаТЧ.Склад = Склад;

			Иначе

				СтрокаТЧ.Склад = СтрокаТЧ.ЗаказПокупателя.СкладГруппа;

			КонецЕсли;

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда

			СтрокаТЧ.Склад = Склад;

		КонецЕсли;
	КонецЦикла;

	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл

		Если СкладИзШапки 
		   И НЕ ЕстьКолонкаЗаказ Тогда

			СтрокаТЧ.Склад = Склад;

		ИначеЕсли ЕстьКолонкаЗаказ 
		        И НЕ СкладИзШапки 
		        И (Не ЗначениеЗаполнено(СтрокаТЧ.Склад)) Тогда

			Если (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя))
				ИЛИ (Не ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя.СкладГруппа))
				ИЛИ ТипЗнч(СтрокаТЧ.ЗаказПокупателя.СкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда

				СтрокаТЧ.Склад = Склад;

			Иначе

				СтрокаТЧ.Склад = СтрокаТЧ.ЗаказПокупателя.СкладГруппа;

			КонецЕсли;

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда

			СтрокаТЧ.Склад = Склад;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ЗаполнитьСкладыВТЧ()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям(ДатаОстатков=Неопределено)

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");

	ТаблицаРезервовПоСериям = Новый ТаблицаЗначений;
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям,ДатаОстатков);
	ТаблицаСерий.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Качество,Склад");
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтруктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);

		ЗаполнятьИзРезервов = ложь;
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании 
		   И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва  Тогда
			Если ИсходнаяСтрока.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтруктураПоиска.Вставить("ДокументРезерва", ИсходнаяСтрока.ЗаказПокупателя);
				ЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;

		Если ЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтруктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;

		ЗаполненКлючСвязи = Ложь;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;

			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			Если СписанноеКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = Товары.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);

			Если ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры = ИсходнаяСтрока.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			КонецЕсли;

			НоваяСтрока.Количество           = СписанноеКоличество;

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 
			                                     КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, 
			                                     СписанноеКоличество);

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Товары.Добавить();

				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;

				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, 
				                                     НоваяСтрока, КоличествоОсталосьПогасить);

				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;

			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);

				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;

				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;

			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ТекПользователь,,
			                          ЕстьРеквизитПроцентСкидкиНаценки, ПересчитыватьСкидку,
			                          ЕстьРеквизитПроцентАвтоматическихСкидок, "Товары");

			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	Если ЗначениеЗаполнено(ДокументОснование.СкладГруппа)
		И ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
		ГруппаДоступностиСкладов = ДокументОснование.СкладГруппа;
	Иначе
		ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.Товары
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура И Остатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.ВозвратнаяТара
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура";
	КонецЕсли;
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	ЕстьТоварыСУчетомПоСерии = ложь;
	
	Запрос.УстановитьПараметр("Договор",                  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",                   Сделка);
	Запрос.УстановитьПараметр("Склад",                    Склад);
	Запрос.УстановитьПараметр("СтатусТары",               Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);

	ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	ОбособленныйУчет =  ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей 
	                  И Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	Остатки.Номенклатура.ВестиУчетПоСериям                   КАК ВестиУчетПоСериям,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток КОНЕЦ КАК КоличествоОстатокОрганизации", "") + ",
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL ТОГДА 9999999 Иначе ТЧЗаказа.НомерСтроки КОНЕЦ КАК НомерСтрокиЗаказа
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|
	|" + ?(ТабличнаяЧасть = Товары, "ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, 
	|										 Организация = &Организация %Условие_Качество%
	|	                                            ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура 
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", "") + ТекстЗапросаПоТЧЗаказа+"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	ОстаткиНаСкладе.Номенклатура.ВестиУчетПоСериям                   КАК ВестиУчетПоСериям,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	0                                           КАК КоличествоОстатокОрганизации", "") + ",
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL ТОГДА 9999999 Иначе ТЧЗаказа.НомерСтроки КОНЕЦ КАК НомерСтрокиЗаказа
	|		
	|	ИЗ
	|   // остатки на складе
	|	(ВЫБРАТЬ
	|		Склад КАК Склад,
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В ( 
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ НОМЕНКЛАТУРА ИЗ
	|					РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|					И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + "))
	|                                               " 
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "И Склад В " + ТекстФильтраПоСкладам, ""), " 
	|	                                     И Склад = &Склад") + "
	|		%Условие_Качество%) КАК ОстаткиНаСкладе
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			Склад КАК Склад,
	|			Номенклатура КАК Номенклатура,
	|			ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, Номенклатура В (
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ НОМЕНКЛАТУРА ИЗ
	|					РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|					И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + "))
	|                                               " 
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "И Склад В " + ТекстФильтраПоСкладам, ""), " 
	|	                                     И Склад = &Склад") + " %Условие_Качество%
	|		)) КАК ОстаткиНаСкладе
	|	СГРУППИРОВАТЬ ПО
	|		Склад,
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры
	|	) КАК ОстаткиНаСкладе
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "Склад В " + ТекстФильтраПоСкладам + " И ", ""), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва = &Сделка
	|	                                            ) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура
	|" + ?(ТабличнаяЧасть = Товары, "
	|   И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры ", "")
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстаткиПоСделке.Склад", "") + " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "Склад В " + ТекстФильтраПоСкладам + " И ", ""), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва <> &Сделка
	|	                                            ) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстатки.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "
	|   И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры ", "") + "
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(ЗначениеЗаполнено(ГруппаДоступностиСкладов), "Склад В " + ТекстФильтраПоСкладам+" И ", ""), " 
	|	                                     Склад = &Склад И ") + "
	|" + ?(ТабличнаяЧасть = Товары, "        СтатусПартии <> &СтатусТары",  " СтатусПартии = &СтатусТары") + "
	|	                                     %Условие_Качество% 
	|	                                            ) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = КПередаче.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры", "") 
		+ СтрЗаменить(ТекстЗапросаПоТЧЗаказа,"Остатки.","ОстаткиНаСкладе.");
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый) ");
	Иначе
		Запрос.Текст = стрЗаменить(Запрос.Текст,"%Условие_Качество%"," ");
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");

	ТаблицаПоЗаказу.Индексы.Добавить("НомерСтрокиЗаказа");

	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	ТаблицаПоОстаткам.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры");

	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;

	ТаблицаПоОстаткам.Индексы.Добавить("СортировкаПоСкладу,ОстатокРезерваПоСделке");
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");
	
	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры");
	КонецЕсли;
	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;
		
		СтруктураПоиска.Номенклатура = СтрокаТаблицы.Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);

		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			
			Если ОстатокКоличестваПоЗаказу <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;
			
			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				
				Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
					
					Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						КолОстПоЗаказу  = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
						КолОстДоступно  = ?(СтрокаОстатков.ОстатокНаСкладе  = NULL, 0, СтрокаОстатков.ОстатокНаСкладе) - 
						?(СтрокаОстатков.ОстатокРезерва   = NULL, 0, СтрокаОстатков.ОстатокРезерва)  - 
						?(СтрокаОстатков.ОстатокКПередаче = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
						
						Если ТабличнаяЧасть = Товары
							И НЕ ПревышатьОстаткиОрганизации Тогда
							КолОстДоступно = Мин(КолОстДоступно, СтрокаТаблицы.КоличествоОстатокОрганизации);
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = Макс(СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче, 0);
					
					КоличествоКСписанию   = ?(Сч = 1, Мин(Макс(СтрокаОстатков.ОстатокНаСкладе-КПередаче,0), РезервПоСделке), Макс(СвободныйОстатокНаСкладе-РезервПоСделке,0));
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));
					
					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
					
					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;
					
					Если ТабличнаяЧасть = Товары Тогда
						Если не ЕстьТоварыСУчетомПоСерии И СтрокаОстатков.ВестиУчетПоСериям Тогда
							ЕстьТоварыСУчетомПоСерии = Истина;
						КонецЕсли;
						
						СтрокаТабличнойЧасти.Количество       = ?(ЗначениеЗаполнено(СтрокаЗаказа.Коэффициент),
						КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент, 0);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;
						СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаЗаказа.ЕдиницаИзмеренияМест;
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						
						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;		                						
						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						Сделка.ВалютаДокумента, ВалютаДокумента,
						ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						Сделка.СуммаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						НалоговыйУчет.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					Иначе
						
						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
					КонецЕсли;
					Если РезервПоСделке > 0 Тогда
						СтрокаОстатков.ОстатокРезерваПоСделке                = СтрокаОстатков.ОстатокРезерваПоСделке - КоличествоКЗаполнению;
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Склад           = СтрокаОстатков.Склад;
					СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;

				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)
	
	//Заполнение серий
	Если ТабличнаяЧасть = Товары И ЕстьТоварыСУчетомПоСерии Тогда
		ЗаполнитьПоСериям(ДатаОстатков);
	КонецЕсли;
	
	// Заполнение табличной части СоставНабора
	Если ТабличнаяЧасть = Товары
		И ДокументОснование.СоставНабора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокумент", ДокументОснование);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.ЕдиницаИзмерения,
		|	Док.Количество,
		|	Док.Коэффициент,
		|	Док.Цена,
		|	Док.СтавкаНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.ПроцентАвтоматическихСкидок,
		|	Док.УсловиеАвтоматическойСкидки,
		|	Док.ЗначениеУсловияАвтоматическойСкидки,
		|	Док.Сумма,
		|	Док.Ссылка.ВалютаДокумента         КАК ВалютаДокумента,
		|	Док.Ссылка.СуммаВключаетНДС        КАК СуммаВключаетНДС,
		|	Док.Ссылка.КратностьВзаиморасчетов КАК КратностьДокумента,
		|	Док.Ссылка.КурсВзаиморасчетов      КАК КурсДокумента,
		|	ВЫБОР 
		|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
		|		КОГДА Док.Ссылка.СкладГруппа ССЫЛКА Справочник.Склады ТОГДА Док.Ссылка.СкладГруппа
		|		ИНАЧЕ &ПустойСклад
		|	КОНЕЦ                              КАК Склад,
		|	ВЫБОР 
		|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстаток
		|	КОНЕЦ                              КАК Остаток,
		|	Док.КлючСтроки
		|
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ПарДокумент) КАК Остатки
		|		ПО Остатки.Номенклатура               = Док.Номенклатура
		|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокумент
		|	И Док.Номенклатура.Комплект
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавленКомплект = Ложь;
		Выборка          = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОстатокКоличестваПоЗаказу = Мин(Выборка.Количество, Выборка.Остаток);
			
			Если ОстатокКоличестваПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Выборка.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
			НоваяСтрока.Количество                          = ОстатокКоличестваПоЗаказу;
			НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
			
			НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
			Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			НалоговыйУчет.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));

			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.Качество                     = Справочники.Качество.Новый;
			НоваяСтрока.Склад                        = Выборка.Склад;
			НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
			НоваяСтрока.ЗаказПокупателя              = Сделка;
			
			ДобавленКомплект                         = Истина;
			
		КонецЦикла;
		
		Если ДобавленКомплект Тогда
			УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполнение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт

	Курс      = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	ТаблицаОстатков = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ДатаОстатков);
	

	Для каждого Строка из ТаблицаОстатков цикл
		СтрокаУслуг = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуг,Строка);
		СтрокаУслуг.Содержание = СокрЛП(СтрокаУслуг.Содержание);
		СтрокаУслуг.Количество 	 = Строка.КолОстаток;
		СтрокаУслуг.Цена         = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена, Сделка.ВалютаДокумента, ВалютаДокумента,
		                                                 ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета),
		                                                 Курс,
		                                                 ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета),
		                                                 Кратность);

		СтрокаУслуг.СтавкаНДС = Строка.СтавкаНДС;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);

		СтрокаУслуг.ЗаказПокупателя = Сделка;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  ЗаполнятьПредоплату - булево, признак необходимости заполнения ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(ЗаполнятьПредоплату = Истина) Экспорт

	ЗаполнитьСкладыВТЧ();

	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	ТЗТовары = Товары.Выгрузить(, "Номенклатура");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Номенклатура"), ТЗТовары);
	ТЗТовары.Свернуть("Номенклатура");

	МассивНоменклатуры = ТЗТовары.ВыгрузитьКолонку("Номенклатура");

	// Сформируем массив складов для фильтров запросов.
	СкладИзШапки = Не мУказаниеСкладовВТЧ;

	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		ТЗСклады = Товары.Выгрузить(, "Склад");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "Склад"), ТЗСклады);
		ТЗСклады.Свернуть("Склад");

		МассивСклады = ТЗСклады.ВыгрузитьКолонку("Склад");

		КолвоЭлементов = МассивСклады.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекЭлемент = МассивСклады[КолвоЭлементов - ОбратныйИндекс];

			Если Не ЗначениеЗаполнено(ТекЭлемент)Тогда
				МассивСклады.Удалить(КолвоЭлементов - ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&МассивЗаказов)
	|	   И Склад В (&МассивСклады)
	|	   И Номенклатура В (&МассивНоменклатуры)
	|	) КАК ОстаткиТоваровВРезерве
	|");

	ТЗЗаказы = Товары.Выгрузить(, "ЗаказПокупателя");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ВозвратнаяТара.Выгрузить(, "ЗаказПокупателя"), ТЗЗаказы);
	ТЗЗаказы.Свернуть("ЗаказПокупателя");

	Запрос.УстановитьПараметр("Ссылка"            , Ссылка);
	Запрос.УстановитьПараметр("МассивЗаказов"     , ТЗЗаказы.ВыгрузитьКолонку("ЗаказПокупателя"));
	Запрос.УстановитьПараметр("МассивСклады"      , МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);

	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Индексы.Добавить("Номенклатура,ХарактеристикаНоменклатуры,Склад");

	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл

			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
			 ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;

			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;

			КонецЦикла;

			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);

	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");

		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.ВыгрузитьКолонки();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");

		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл

			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;

			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;

			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);

			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;

			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл

				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;

				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;

				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;

				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				НоваяСтрока.ИндексИсходнойСтроки         = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество                   = СписанноеКоличество;
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;

				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;

				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;

			КонецЦикла;

			Если КоличествоОсталосьПогасить > 0 Тогда

				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);

				НоваяСтрока.ИндексИсходнойСтроки         = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество                   = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить, 2, 1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл

		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;

		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл

			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда

				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;

				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры          = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                           = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки                = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок         = Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;

			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;
			РедактируемаяСтрока.ЗаказПокупателя              = Строка.ЗаказПокупателя;

			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);

			Если ЭтоТовары Тогда
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;

			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;

		КонецЦикла;
	КонецЦикла;

	Если мЕстьКолонкаСерии Тогда
		ЗаполнитьПоСериям();
	КонецЕсли;
	
	Если ЗаполнятьПредоплату Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗаказПокупателя,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	СчетНаОплатуТовары.КлючСтроки";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуТовары.НомерСтроки
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.КоличествоМест                      = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                               = ДокументОснование.Склад;
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		НалоговыйУчет.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;
		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
		
	КонецЦикла;
	
	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
	КонецЕсли;

КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.ЗаказПокупателя,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуВозвратнаяТара.НомерСтроки
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                        = ДокументОснование.Склад;
	КонецЦикла;

КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,	
	|	СчетНаОплатуУслуги.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуУслуги.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуУслуги.ЗначениеУсловияАвтоматическойСкидки,	
	|	СчетНаОплатуУслуги.ЗаказПокупателя,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплатуУслуги.НомерСтроки
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.Содержание                          = Выборка.Содержание;
		НоваяСтрока.Количество                          = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		НалоговыйУчет.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");
	
	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	// Подготовка данных для регл учета (НДС)
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента)
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
				
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.ХарактеристикаНоменклатуры,
				Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
				
				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					
					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Количество, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + НалоговыйУчет.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, НалоговыйУчет.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 КратностьВзаиморасчетов);

		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);		

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)

	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + НалоговыйУчет.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
			УчитыватьНДС, СуммаВключаетНДС, НалоговыйУчет.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;

		СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КурсДокумента, 
										 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                 СтруктураШапкиДокумента.КратностьДокумента, 
										 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента,
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента,
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов,
		   ВалютаДокумента,
		   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		   СтруктураШапкиДокумента.КурсДокумента,
		   КурсВзаиморасчетов,
		   СтруктураШапкиДокумента.КратностьДокумента,
		   КратностьВзаиморасчетов);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДСУпр     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДСУпр;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр",             ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов

		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			                                  СтруктураШапкиДокумента.ВалютаЗаказа,
			                                  СтруктураШапкиДокумента.КурсДокумента, 
			                                  СтруктураШапкиДокумента.КурсЗаказа,
			                                  СтруктураШапкиДокумента.КратностьДокумента, 
			                                  СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		                                    СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		                                    СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                    СтруктураШапкиДокумента.КурсДокумента, 
		                                    СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                    СтруктураШапкиДокумента.КратностьДокумента,
		                                    СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);


	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТары.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));	
	ТаблицаТары.Колонки.Добавить("НДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));	
	
	ТаблицаТары.ЗаполнитьЗначения(Перечисления.СтавкиНДС.НеНДС, "СтавкаНДС");
	ТаблицаТары.ЗаполнитьЗначения(0, "НДС");
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	СтруктураОбязательныхПолей.Вставить("ВидПередачи");

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");

	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если  Не мУказаниеСкладовВТЧ
	    И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	  И  (  СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	       И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) + """ или """ + СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.Бартерный)
		+ """.", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры


// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если  СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
		Если  СтруктураШапкиДокумента.ОтражатьВНалоговомУчете			
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			
			Если  Дата < '20110101'
				И СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода до 2010 года!",Отказ,Заголовок);
				
			ИначеЕсли Дата >= '20110101'
			 	 И НЕ СтруктураШапкиДокумента.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.СКомиссионером_НК Тогда
				 
				 ОбщегоНазначения.СообщитьОбОшибке("В договоре комиссии указана неправильная схема налогового учета! Используйте схему для периода с 2011 года!",Отказ,Заголовок);
				 
			 КонецЕсли;
		
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ЕдиницаИзмерения");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок, "ВидСклада");	
	
	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	                                              Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
                                                          Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	// Складов с видом НТТ здесь быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок, "ВидСклада");

	// Вызовем общую процедуру для проверки проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-пакетов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам,  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)

	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                       ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	                       ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	                          ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
		                                             Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоКомплектам, 
	                          ТаблицаПоТаре, Отказ, Заголовок);


	Если ТаблицаПоКомплектам.Количество() + ТаблицаПоТаре.Количество() >0 тогда

		// Зарегистрируем в последовательности УУ
		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период      = Дата;
		КонецЕсли;
	КонецЕсли;

	// Проводить по партиям нужно при передаче со склада,
	//  а также по ордеру: 1. если не используется списывание ордером, тогда выполняется списание по реализации,
	//						   и формируется резерв (Купленный отложенная отгрузка) для последующего списания ордером;
	//					   2. если же флажок "Списывать партии расходным ордером" установлен, тогда обычное списывание.
	// Проводить по партиям сразу нужно если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;

	Если ПроводитьПоПартиям Тогда

		УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	Иначе

		// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
		Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
			УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация);
		КонецЕсли;

	КонецЕсли;	

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
//
// Формирует движения по регистрам подсистемы учета НДС "НДСПокупки" и "НДСПродажи"
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		
			И Дата < '20110101'// с  2011 согласно НК обязательства по НДС наступают в момент передачи товаров по договорам комиссии
			Тогда
			
		// Поступление комиссионных товаров не отражается в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если Не ОтражатьВНалоговомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	мУчетнаяПолитикаРегл = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("СхемаНалогообложения", Организация, КонецМесяца(Дата),,Отказ); 
	Если Отказ Тогда
		//проблемы при получении учетной политики
		Возврат;
	КонецЕсли;
	
	Если НЕ мУчетнаяПолитикаРегл.НДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	НаборДвижений = Движения.НДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ТаблицаДвижений.Очистить();
	ТаблицаДвиженийТара   = ТаблицаДвижений.Скопировать();
	
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСРегл,СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаСНДСРегл       .Имя = "СуммаВзаиморасчетовРегл";
	ТаблицаКопия.Колонки.СуммаНДСРегл        .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСРегл,СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаСНДСРегл       .Имя = "СуммаВзаиморасчетовРегл";
	ТаблицаКопия.Колонки.СуммаНДСРегл        .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияНДСПродаж.РеализацияПокупателю, "СобытиеНДС");
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС","СуммаСНДСРегл,СуммаНДСРегл");
	ТаблицаКопия.Колонки.СуммаСНДСРегл		 .Имя = "СуммаВзаиморасчетовРегл";
	ТаблицаКопия.Колонки.СуммаНДСРегл        .Имя = "НДС";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияНДСПродаж.РеализацияПокупателю, "СобытиеНДС");
	
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
		Движения.НДСПродаж.ВыполнитьПриход();
		Движения.НДСПродаж.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
	
		Движения.НДСПродаж.ВыполнитьПриход();
		Движения.НДСПродаж.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                             ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	                             ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		
		УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                              мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                              ВидДвиженияНакопления.Приход, Отказ, Заголовок);

		Если (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
			Если СуммаДокумента <> 0 Тогда

				// По регистру ПродажиПоДисконтнымКартам.
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
					НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

					// Получим таблицу значений, совпадающую со структурой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

					// Заполним таблицу движений.
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
					СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента,
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента,
					СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

					Если Не Отказ Тогда
						НаборДвижений.ВыполнитьДвижения();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// ТОВАРЫ ПО РЕГИСТРУ Продажи.

			НаборДвижений = Движения.Продажи;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			ТаблицаПоТоварам.Колонки.НДС.Имя = "НДСВрем";
			ТаблицаПоТоварам.Колонки.НДСУпр.Имя = "НДС";			
			
			// Заполним таблицу движений.
			
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений, Проект, Дата, "Продажи");
				
			Иначе
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
				
			КонецЕсли;
			
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
            // Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
			КонецЕсли;


			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;

			// УСЛУГИ ПО РЕГИСТРУ Продажи.

			НаборДвижений = Движения.Продажи;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			
			ТаблицаПоУслугам.Колонки.НДС.Имя = "НДСВрем";
			ТаблицаПоУслугам.Колонки.НДСУпр.Имя = "НДС";

			// Заполним таблицу движений.
			
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоУслугам,ТаблицаДвижений, Проект, Дата, "Продажи");
				
			Иначе
				
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвижений);
				
			КонецЕсли;
			
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент , "Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументПродажи");
			ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
            // Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "ЗаказПокупателя");
			КонецЕсли;

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Продажи.ВыполнитьДвижения();
			КонецЕсли;

			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;

			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;

			ТаблицаПоТоварам.Колонки.НДС.Имя = "НДСУпр";			
			ТаблицаПоТоварам.Колонки.НДСВрем.Имя = "НДС";

			ТаблицаПоУслугам.Колонки.НДС.Имя = "НДСУпр";			
			ТаблицаПоУслугам.Колонки.НДСВрем.Имя = "НДС";

		КонецЕсли;

		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.

			ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			РезультатЗапросаКомплектыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаОпт);
			РезультатЗапросаТараОпт      = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,       ВидСкладаОпт);

			Если Не РезультатЗапросаКомплектыОпт.Пустой() ИЛИ НЕ РезультатЗапросаТараОпт.Пустой() Тогда
			
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;

				Если НЕ Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыОпт", РезультатЗапросаКомплектыОпт.Выгрузить());
					СтруктТаблицДокумента.Вставить("ТараОпт",      РезультатЗапросаТараОпт     .Выгрузить());

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараОпт");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;

			КонецЕсли;

			ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
			РезультатЗапросаКомплектыРозн = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоКомплектам, ВидСкладаРозн);
			РезультатЗапросаТараРозн      = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТаре,       ВидСкладаРозн);

			Если Не РезультатЗапросаКомплектыРозн.Пустой() ИЛИ НЕ РезультатЗапросаТараРозн.Пустой() Тогда
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;

				Если Не Отказ Тогда
					ТаблицаКомплектыРозн = РезультатЗапросаКомплектыРозн.Выгрузить();
					ТаблицаТараРозн      = РезультатЗапросаТараРозн.Выгрузить();

					ТаблицаКомплектыРозн.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

					Если ТаблицаКомплектыРозн.Количество() <> 0 Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаКомплектыРозн.ВыгрузитьКолонку("Склад"),
						ТаблицаКомплектыРозн.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаКомплектыРозн, ТаблицаПоЦенам, "ВидСклада");
					КонецЕсли;

					ТаблицаТараРозн.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));

					Если ТаблицаТараРозн.Количество() <> 0 Тогда
						ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТараРозн.ВыгрузитьКолонку("Склад"),
						ТаблицаТараРозн.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

						УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТараРозн, ТаблицаПоЦенам, "ВидСклада");
					КонецЕсли;
					
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыРозн", ТаблицаКомплектыРозн);
					СтруктТаблицДокумента.Вставить("ТараРозн"     , ТаблицаТараРозн);

					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);

					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараРозн");

					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;

			КонецЕсли;

		Иначе // отпуск по ордеру

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", ТаблицаПоКомплектам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
								
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
						
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
					
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		КонецЕсли;
		
		// Проверка остатков лимитов возвратной тары при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный И ТаблицаПоТаре.Количество()<>0 Тогда
			Движения.ТоварыПереданные.КонтрольЛимитовВозвратнойТары(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		// ТАРА ПО РЕГИСТРУ ТоварыПереданные
		Если Не Отказ Тогда
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);

			КопияТаблицаПоТаре = ТаблицаПоТаре.Скопировать();
			КопияТаблицаПоТаре.Колонки.ЗаказПокупателя.Имя = "Сделка";

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", КопияТаблицаПоТаре);
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				КопияТовары = ТаблицаПоТоварам.Скопировать();

				КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";

				СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			КонецЕсли;

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);

			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Для Каждого ТаблицаДанных Из ТаблицыДанныхДокумента Цикл
					ТаблицаДанных.Значение.ЗаполнитьЗначения(Сделка, "Сделка");
				КонецЦикла;
			КонецЕсли;

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");

			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");
			КонецЕсли;

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;

		// ТОВАР, ТАРА И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары",         Отказ, Заголовок);
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок);
			Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги",         Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
			ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		КонецЕсли;

		// Если есть списание из резерва, то надо списать резерв
		ТаблицаПоТоварамИзРезерва = ТаблицаПоКомплектам.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТоварамИзРезерва.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТоварамИзРезерва.Получить(Сч);
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
				ТаблицаПоТоварамИзРезерва.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;

		Если ТаблицаПоТоварамИзРезерва.Количество() > 0 Тогда
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ТаблицаПоТоварамИзРезерва.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамИзРезерва, ТаблицаДвижений);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		ТаблицаПоТареИзРезерва = ТаблицаПоТаре.Скопировать();
		Сч = 0;
		Пока Сч < ТаблицаПоТареИзРезерва.Количество() Цикл
			СтрокаТаблицы = ТаблицаПоТареИзРезерва.Получить(Сч);
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
				ТаблицаПоТареИзРезерва.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;

		Если ТаблицаПоТареИзРезерва.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

			// Заполним таблицу движений.
			ТаблицаПоТареИзРезерва.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТареИзРезерва, ТаблицаДвижений);

			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;

			Если Не Отказ Тогда
				Движения.ТоварыВРезервеНаСкладах.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли; // Если ОтражатьВУправленческомУчете

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;

	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете 
	 Или Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
								  
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");

		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьРасход();
		КонецЕсли;
		
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		НаборДвижений = Движения.ТоварыКПередачеОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка     , "ДокументПередачи");
		
		Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			НаборДвижений.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
			Движения.ТоварыКПередачеОрганизаций.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;		

	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		НаборДвижений = Движения.ТоварыОрганизаций;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Комиссионер");
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ТоварыОрганизаций.ВыполнитьПриход();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента, "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
		
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Строка.ЗаказСписания = СтруктураШапкиДокумента.Сделка;//Для заполнения счета в регистре ПродажиСебестоимость
		Иначе	
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;

	КонецЦикла;
	
	// Учет по проектам
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)


	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");

	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
КонецПроцедуры 

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
											ТаблицаПоТаре, Отказ, Заголовок) Экспорт

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);

	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;

	КонецЦикла;                                   	

	// Если резервирование под заказ - заказ партии
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
		ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");

		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");

	КонецЕсли;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	// ТАРА ПО РЕГИСТРУ СписанныеТовары.

	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);

	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл

		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;

	КонецЦикла;
		
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПартии");

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");

	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("ВидСклада", "Склад.ВидСклада");

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА СТРУКТУРЫ ШАПКИ ДОКУМЕНТА И ТАБЛИЦ ДОКУМЕНТА
// (кроме таблицы по таре)

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;


	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = ОбщегоНазначения.СформироватьДеревоПолейЗапросаПоШапке();
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов",                       "ВедениеВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов",                        "ВалютаВзаиморасчетов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация",                                 "ДоговорОрганизация");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора",                                 "ВидДоговора");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом",      "ВестиПоДокументамРасчетовСКонтрагентом");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете",            "ОтражатьВРегламентированномУчете");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",               "ВидОперации",                                 "СделкаВидОперации");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",                "ВидСклада",                                   "ВидСклада");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиПартионныйУчетПоСкладам",                "ВестиПартионныйУчетПоСкладам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",      "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",     "ВедениеУчетаПоПроектам",                       "ВедениеУчетаПоПроектам");
	ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "СхемаНалоговогоУчета"                      , "СхемаНалоговогоУчета");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		ОбщегоНазначения.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);

	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре) Экспорт

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                   , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                               , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                       , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                             , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                              , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                           , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                         , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"                      , "Количество");
	СтруктураПолей.Вставить("Качество"                           , "Качество");
	СтруктураПолей.Вставить("Склад"                              , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                          , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                           , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                          , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                                , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                             , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"         , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                  , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"               , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                         , "КлючСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"                    , "ЗаказПокупателя");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"       , "Количество");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);

	// Дополним полями, нужными для регл.учета НДС
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// Получим необходимые данные для проведения и проверки заполнения данных по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;
	
	РезультатЗапросаПоУслугам = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);

	// Получим необходимые данные для проведения и проверки заполнения данных 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);

	РезультатЗапросаПоТаре = ОбщегоНазначения.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругленияТара);
	

КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ЗаказПокупателя")
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;

		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;

		#Если Клиент Тогда
			Если Не ЗначениеЗаполнено(Склад) И НЕ мУказаниеСкладовВТЧ И ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
			КонецЕсли;
		#КонецЕсли

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		 Или (ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
		      И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			Сделка = Основание;
		Иначе
			Сделка = Основание.ЗаказПокупателя;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
						
			Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
			КонецЕсли;
			
		ИначеЕсли Основание.Проведен Тогда // Заказ покупателя
			
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание);
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();

		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		// Заполним реквизиты шапки по документу основанию.
		Организация   = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидОперации   = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;

		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			Склад = Основание.СкладОрдер;
		Иначе
			Склад = Основание.СкладОрдер.Склад;
		КонецЕсли;

		МассивЗаказов = Неопределено;
#Если Клиент Тогда

		СтруктТабЧастей = Новый Структура;
		СтруктТабЧастей.Вставить("Товары",         "Заказ");
		СтруктТабЧастей.Вставить("ВозвратнаяТара", "Заказ");

		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
		
		ЗаказыВТабЧасти = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();
		СтруктПараметры.Вставить("ЗаказВТабЧасти",
			    ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
			Или ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);

		РезультатВыбораЗаказа = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(Основание, СтруктПараметры);

		Если РезультатВыбораЗаказа.ВыборСделан Тогда

			Контрагент         = РезультатВыбораЗаказа.Контрагент;

			Если ЗаполнениеДокументов.МожноИспользоватьДоговорДляДокумента(РезультатВыбораЗаказа.Договор, Контрагент, Организация, мСтруктураПараметровДляПолученияДоговора) Тогда
				ДоговорКонтрагента = РезультатВыбораЗаказа.Договор;
			КонецЕсли;

			МассивЗаказов      = РезультатВыбораЗаказа.Заказ;
			Если МассивЗаказов.Количество() = 1 Тогда
				Сделка         = МассивЗаказов[0];
			КонецЕсли;
		КонецЕсли;
#Иначе
		Контрагент         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");
#КонецЕсли

		ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		// ТипЦен.
		ТипЦен = ДоговорКонтрагента.ТипЦен;

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;

		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда

			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
			ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;

		Иначе
			// Заполним значениями по умолчанию (не заполнен ТипЦен).
			СуммаВключаетНДС= Истина;
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Заполним табличные части по документу основанию (Поступление товаров);
			// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
			ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Товары", МассивЗаказов);
			ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание, МассивЗаказов);

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", Основание.Метаданные()) Тогда
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
	Иначе
		ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", Основание.Метаданные()) Тогда
		ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете     = Основание.ОтражатьВНалоговомУчете;
	Иначе
		ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");

		Если ОтражатьВБухгалтерскомУчете Тогда
			ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
		Иначе
			ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;
	
	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, "Товары");
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = НалоговыйУчет.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + НалоговыйУчет.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда 

		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
		КонецЦикла
	Иначе
		//способ списания брака всегда "со склада"
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Товары"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);

			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Возвратная тара"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;


	
	ЗаполнитьСкладыВТЧ();
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
		   И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) 
		   И СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;

	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
		
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	
	ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) 
								ИЛИ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
	                                                Отказ, Заголовок);

	// Проверить заполнение ТЧ.
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "Состав набора".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Количество");
	СтруктураПолей.Вставить("Цена");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);

	//Проверим на возможность проведения в БУ и НУ.
	Если ОтражатьВБухгалтерскомУчете 
	 Или ОтражатьВНалоговомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
											 Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда

		// Подготовим таблицу скидок для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		                    ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)

	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");

	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;

	//Если в копируемом документе было право отпуска без контроля взаиморасчетов, то в новом документе это право нужно давать явно.
	ОтключитьКонтрольВзаиморасчетов = Ложь;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Функция выполняет пересчет автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
Функция ПересчитатьАвтоматическиеСкидки() Экспорт

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(Услуги);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                      , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                     , СуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                              , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС"                       , УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС"                   , СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета"     , мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика"                    , ПолучитьЗначениеУчетнойПолитики());

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Услуги, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПересчитатьАвтоматическиеСкидки()

// Функция возвращает структуру со значениями учетной политики.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьЗначениеУчетнойПолитики() Экспорт

	Если мУчетнаяПолитика = Неопределено Тогда
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(), ТекущаяДата(), Дата), Ложь);
	КонецЕсли;

	Возврат мУчетнаяПолитика;

КонецФункции // ПолучитьЗначениеУчетнойПолитики()

// Функция проверяет возможность расчета автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево.
//
Функция МожноРассчитыватьАвтоматическиеСкидки() Экспорт

	Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда
		Если ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоКоличествуТовара
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоСуммеДокумента
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоВидуОплаты
		 Или ПолучитьЗначениеУчетнойПолитики().ИспользоватьСкидкиПоДисконтнойКарте Тогда
			мРассчитыватьАвтоматическиеСкидки = Истина;
		Иначе
			мРассчитыватьАвтоматическиеСкидки = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат мРассчитыватьАвтоматическиеСкидки;

КонецФункции // МожноРассчитыватьАвтоматическиеСкидки()

Процедура ПриИзмененииОрганизации(ПодменюДействияФормы = Неопределено, ЭлементыФормыНомер = Неопределено) Экспорт
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ПодменюДействияФормы, ЭлементыФормыНомер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СуммаНДСВал     = СтрокаТаблицы.НДС;
		СуммаБезНДСВал  = СуммаСНДСВал - СуммаНДСВал;
		
		ВалютаРег      = мВалютаРегламентированногоУчета;
		Данные         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												мВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												Данные.Курс,
												СтруктураШапкиДокумента.КратностьДокумента,
												Данные.Кратность,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = НалоговыйУчет.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
											ИСТИНА,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
	КонецЦикла;
	
КонецПроцедуры


мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мЕстьКолонкаСерии = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();

мУказаниеСкладов = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
   ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
   Неопределено);
